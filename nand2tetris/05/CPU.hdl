// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And(a=instruction[15],b=instruction[12],out=vins12);
    And(a=instruction[15],b=instruction[5],out=vins5);
    And(a=instruction[15],b=instruction[4],out=vins4);
    And(a=instruction[15],b=instruction[3],out=writeM);
    And(a=instruction[15],b=instruction[2],out=vins2);
    And(a=instruction[15],b=instruction[1],out=vins1);
    And(a=instruction[15],b=instruction[0],out=vins0);

    Not(in=instruction[15],out=nvins15);
    Mux16(a=instruction,b=outA,sel=instruction[15],out=A0);
    Or(a=vins5,b=nvins15,out=lA);
    ARegister(in=A0,load=lA,out=A1);

    Mux16(a=A1,b=inM,sel=vins12,out=AM);
    DRegister(in=outA,load=vins4,out=D);
    ALU(x=D,y=AM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outA,zr=zr,ng=ng);
    And16(a=outA,b=outA,out=outM);

    And16(a=A1,b=A1,out[0..14]=addressM);

    And(a=vins2,b=ng,out=j2);
    And(a=vins1,b=zr,out=j1);
    Not(in=ng,out=nng);
    Not(in=zr,out=nzr);
    And(a=nng,b=nzr,out=pos);
    And(a=vins0,b=pos,out=j3);
    Or(a=j1,b=j2,out=jj1);
    Or(a=jj1,b=j3,out=jjj);
    PC(in=A1,load=jjj,inc=true,reset=reset,out[0..14]=pc);
}